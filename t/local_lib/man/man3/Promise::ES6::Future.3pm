.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Promise::ES6::Future 3pm"
.TH Promise::ES6::Future 3pm "2019-12-17" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promise::ES6::Future \- Translation to/from Future
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides logic to convert between
promises and Future instances.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SH "$promise = from_future( $FUTURE )"
.el .SH "\f(CW$promise\fP = from_future( \f(CW$FUTURE\fP )"
.IX Header "$promise = from_future( $FUTURE )"
Returns a <Promise:ES6> instance from the given \f(CW$FUTURE\fR.
(If \f(CW$FUTURE\fR is not a Future instance, \f(CW$FUTURE\fR is returned.)
.ie n .SH "$future = to_future( $PROMISE )"
.el .SH "\f(CW$future\fP = to_future( \f(CW$PROMISE\fP )"
.IX Header "$future = to_future( $PROMISE )"
Returns a Future instance from the given \f(CW$PROMISE\fR.
(If \f(CW$PROMISE\fR is a Future instance, \f(CW$PROMISE\fR is returned.)
.PP
Note that this function can work with promise objects that aren’t
Promise::ES6 instances. In fact, anything that \fIisn’t\fR a Future
instance will cause this function to create a new Future.
