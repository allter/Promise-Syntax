.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Promise::ES6::IOAsync 3pm"
.TH Promise::ES6::IOAsync 3pm "2020-04-18" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promise::ES6::IOAsync \- Promises/A+\-compliant <https://github.com/promises-aplus/promises-spec> promises for IO::Async
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $loop = IO::Async::Loop\->new();
\&
\&    my $loop_guard = Promise::ES6::IOAsync::SET_LOOP($loop);
\&
\&    # Now use Promise::ES6::IOAsync as you would plain Promise::ES6.
.Ve
.SH "DEPRECATION NOTICE"
.IX Header "DEPRECATION NOTICE"
This module is deprecated and will go away eventually.
Use \f(CW\*(C`use_event()\*(C'\fR instead, as described in Promise::ES6’s documentation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exposes the same functionality as Promise::ES6::AnyEvent
but for IO::Async rather than AnyEvent.
.PP
Whereas AnyEvent assumes that an event loop is global, IO::Async
allows multiple concurrent event loops. In order to accommodate this
difference in architecture, this module requires an active IO::Async::Loop
object before it can be used. See \f(CW\*(C`SET_LOOP()\*(C'\fR below.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "$guard = \s-1SET_LOOP\s0( $LOOP )"
.el .SS "\f(CW$guard\fP = \s-1SET_LOOP\s0( \f(CW$LOOP\fP )"
.IX Subsection "$guard = SET_LOOP( $LOOP )"
Sets this module’s active IO::Async::Loop object. This is a internal
global; if you try to set a loop while one is already set, an exception
is thrown.
.PP
This returns an opaque object that, when \s-1\fIDESTROY\s0()\fRed, will clear this
module’s internal loop.
